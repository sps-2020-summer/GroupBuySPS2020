{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "GroupBuy",
    "description" : "GroupBuy API",
    "termsOfService" : "http://swagger.io/terms/",
    "contact" : {
      "email" : "theleafgecko@gmail.com"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version" : "1.0.0"
  },
  "externalDocs" : {
    "description" : "Find out more about Swagger",
    "url" : "http://swagger.io"
  },
  "servers" : [ {
    "url" : "https://virtserver.swaggerhub.com/leafgecko/groupbuy/1.0.0",
    "description" : "SwaggerHub API Auto Mocking"
  } ],
  "tags" : [ {
    "name" : "offer",
    "description" : "Offer help to others",
    "externalDocs" : {
      "description" : "Find out more",
      "url" : "http://swagger.io"
    }
  }, {
    "name" : "request",
    "description" : "Request help from others"
  }, {
    "name" : "task",
    "description" : "Tasks taken up to help others",
    "externalDocs" : {
      "description" : "Find out more about our app",
      "url" : "http://swagger.io"
    }
  } ],
  "paths" : {
    "/offer" : {
      "put" : {
        "tags" : [ "offer" ],
        "summary" : "Update an existing offer",
        "operationId" : "updateOffer",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/Offer"
        },
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Offer not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        }
      },
      "post" : {
        "tags" : [ "offer" ],
        "summary" : "Add a new offer",
        "operationId" : "addOffer",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/Offer"
        },
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        }
      }
    },
    "/offer/findByStatus" : {
      "get" : {
        "tags" : [ "offer" ],
        "summary" : "Finds Offer by status",
        "description" : "Multiple status values can be provided with comma separated strings",
        "operationId" : "findOfferByStatus",
        "parameters" : [ {
          "name" : "status",
          "in" : "query",
          "description" : "Status values that need to be considered for filter",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "default" : "open",
              "enum" : [ "open", "pending", "done", "cancelled" ]
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Offer"
                  }
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Offer"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid status value"
          }
        }
      }
    },
    "/offer/{offerId}" : {
      "get" : {
        "tags" : [ "offer" ],
        "summary" : "Find offer by ID",
        "description" : "Returns a single offer",
        "operationId" : "getOfferById",
        "parameters" : [ {
          "name" : "offerId",
          "in" : "path",
          "description" : "ID of offer to return",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Offer"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Offer"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Offer not found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "offer" ],
        "summary" : "Deletes an offer",
        "operationId" : "deleteOffer",
        "parameters" : [ {
          "name" : "api_key",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offerId",
          "in" : "path",
          "description" : "Offer id to delete",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Offer not found"
          }
        }
      }
    },
    "/request" : {
      "put" : {
        "tags" : [ "request" ],
        "summary" : "Update an existing request",
        "operationId" : "updateRequest",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/Request"
        },
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Request not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        }
      },
      "post" : {
        "tags" : [ "request" ],
        "summary" : "Add a new Request",
        "operationId" : "addRequest",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/Request"
        },
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        }
      }
    },
    "/request/findByStatus" : {
      "get" : {
        "tags" : [ "request" ],
        "summary" : "Finds Request by status",
        "description" : "Multiple status values can be provided with comma separated strings",
        "operationId" : "findRequestsByStatus",
        "parameters" : [ {
          "name" : "status",
          "in" : "query",
          "description" : "Status values that need to be considered for filter",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "default" : "open",
              "enum" : [ "open", "pending", "done", "cancelled" ]
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Request"
                  }
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Request"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid status value"
          }
        }
      }
    },
    "/request/{requestId}" : {
      "get" : {
        "tags" : [ "request" ],
        "summary" : "Find request by ID",
        "description" : "Returns a single request",
        "operationId" : "getRequestById",
        "parameters" : [ {
          "name" : "requestId",
          "in" : "path",
          "description" : "ID of offer to return",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Request"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Request"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Request not found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "request" ],
        "summary" : "Deletes a Request",
        "operationId" : "deleteRequest",
        "parameters" : [ {
          "name" : "api_key",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "requestId",
          "in" : "path",
          "description" : "Request id to delete",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Request not found"
          }
        }
      }
    },
    "/task" : {
      "put" : {
        "tags" : [ "task" ],
        "summary" : "Update an existing task",
        "operationId" : "updateTask",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/Task"
        },
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Offer not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        }
      },
      "post" : {
        "tags" : [ "task" ],
        "summary" : "Add a new task",
        "operationId" : "addTask",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/Task"
        },
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        }
      }
    },
    "/task/findByStatus" : {
      "get" : {
        "tags" : [ "task" ],
        "summary" : "Finds Task by status",
        "description" : "Multiple status values can be provided with comma separated strings",
        "operationId" : "findTaskByStatus",
        "parameters" : [ {
          "name" : "status",
          "in" : "query",
          "description" : "Status values that need to be considered for filter",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "default" : "open",
              "enum" : [ "open", "pending", "done", "cancelled" ]
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Task"
                  }
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid status value"
          }
        }
      }
    },
    "/task/{taskId}" : {
      "get" : {
        "tags" : [ "task" ],
        "summary" : "Find Task by ID",
        "description" : "Returns a single Task",
        "operationId" : "getTaskById",
        "parameters" : [ {
          "name" : "taskId",
          "in" : "path",
          "description" : "ID of Task to return",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Task"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Task"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Task not found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "task" ],
        "summary" : "Deletes a Task",
        "operationId" : "deleteTask",
        "parameters" : [ {
          "name" : "api_key",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "taskId",
          "in" : "path",
          "description" : "Task id to delete",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Task not found"
          }
        }
      }
    },
    "/user" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Create user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "createUser",
        "requestBody" : {
          "description" : "Created user object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/user/createWithArray" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Creates list of users with given input array",
        "operationId" : "createUsersWithArrayInput",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/UserArray"
        },
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/user/createWithList" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Creates list of users with given input array",
        "operationId" : "createUsersWithListInput",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/UserArray"
        },
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/user/login" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Logs user into the system",
        "operationId" : "loginUser",
        "parameters" : [ {
          "name" : "username",
          "in" : "query",
          "description" : "The user name for login",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "password",
          "in" : "query",
          "description" : "The password for login in clear text",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : {
              "X-Rate-Limit" : {
                "description" : "calls per hour allowed by the user",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              },
              "X-Expires-After" : {
                "description" : "date in UTC when token expires",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "format" : "date-time"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Logs out current logged in user session",
        "operationId" : "logoutUser",
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/user/{username}" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Get user by user name",
        "operationId" : "getUserByName",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "The name that needs to be fetched. Use user1 for testing.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid username supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      },
      "put" : {
        "tags" : [ "user" ],
        "summary" : "Updated user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "updateUser",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "name that need to be updated",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Updated user object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Invalid user supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "user" ],
        "summary" : "Delete user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "deleteUser",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "The name that needs to be deleted",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid username supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "Request" : {
        "required" : [ "id", "taskId" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "example" : "123"
          },
          "taskId" : {
            "type" : "string",
            "example" : "456"
          }
        },
        "xml" : {
          "name" : "Request"
        }
      },
      "Task" : {
        "required" : [ "expectedDeliveryTime", "fee", "id", "item", "payerName", "shopLocation", "status" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "example" : "123"
          },
          "shopLocation" : {
            "type" : "string",
            "example" : "placeA"
          },
          "expectedDeliveryTime" : {
            "type" : "string",
            "example" : "05-02-2020 10:12:46"
          },
          "item" : {
            "type" : "string",
            "example" : "foodsetA"
          },
          "payerName" : {
            "type" : "string",
            "example" : "Alice"
          },
          "fee" : {
            "type" : "number",
            "example" : 12.35
          },
          "doerName" : {
            "type" : "string",
            "example" : "Bob"
          },
          "status" : {
            "type" : "string",
            "description" : "task status",
            "enum" : [ "open", "pending", "done", "cancelled" ]
          }
        },
        "xml" : {
          "name" : "Task"
        }
      },
      "User" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "username" : {
            "type" : "string"
          },
          "firstName" : {
            "type" : "string"
          },
          "lastName" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          },
          "userStatus" : {
            "type" : "integer",
            "description" : "User Status",
            "format" : "int32"
          }
        },
        "xml" : {
          "name" : "User"
        }
      },
      "Offer" : {
        "required" : [ "expectedDeliveryTime", "id", "shopLocation", "status" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "example" : "123"
          },
          "shopLocation" : {
            "type" : "string",
            "example" : "placeA"
          },
          "expectedDeliveryTime" : {
            "type" : "string",
            "example" : "05-02-2020 10:12:46"
          },
          "status" : {
            "type" : "string",
            "description" : "task status",
            "enum" : [ "open", "pending", "done", "cancelled" ]
          }
        },
        "xml" : {
          "name" : "Offer"
        }
      },
      "ApiResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "format" : "int32"
          },
          "type" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          }
        }
      }
    },
    "requestBodies" : {
      "Offer" : {
        "description" : "Offer object that needs to be added",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Offer"
            }
          },
          "application/xml" : {
            "schema" : {
              "$ref" : "#/components/schemas/Offer"
            }
          }
        },
        "required" : true
      },
      "Request" : {
        "description" : "Request object that needs to be added",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Request"
            }
          },
          "application/xml" : {
            "schema" : {
              "$ref" : "#/components/schemas/Request"
            }
          }
        },
        "required" : true
      },
      "Task" : {
        "description" : "Task object that needs to be added",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Task"
            }
          },
          "application/xml" : {
            "schema" : {
              "$ref" : "#/components/schemas/Task"
            }
          }
        },
        "required" : true
      },
      "UserArray" : {
        "description" : "List of user object",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          }
        },
        "required" : true
      }
    },
    "securitySchemes" : {
      "groupbuy_auth" : {
        "type" : "oauth2",
        "flows" : {
          "implicit" : {
            "authorizationUrl" : "http://",
            "scopes" : {
              "write:xxx" : "modify xxx in your account",
              "read:xxx" : "read your xxx"
            }
          }
        }
      },
      "api_key" : {
        "type" : "apiKey",
        "name" : "api_key",
        "in" : "header"
      }
    }
  }
}